---
- name: Ensure NOC user {{ username  }} exists
  user:
    name: "{{ username }}"
  register: user
  tags: noc_users

- name: Set up NOC user {{ username }}
  block:
    - name: Create password for NOC user {{ username }}
      shell: dd if=/dev/urandom bs=20 count=1 2> /dev/null | base64
      register: password
    - name: Hash password of NOC user {{ username }}
      shell: openssl passwd -1 {{ password.stdout | regex_replace('[\n\r]', '') }}
      register: password_md5
    - name: Reconfigure NOC user {{ username }}
      user:
        name: "{{ username }}"
        home: "{{ home }}"
        shell: /bin/bash
        append: yes
        groups: sudo
        password: "{{ password_md5.stdout | regex_replace('[\n\r]', '') }}"
    - name: Copy user password for NOC member {{ username }} to {{ home }}/password
      copy:
        dest: "{{ home }}/password"
        content: "{{ password.stdout }}\n"
        owner: "{{ username }}"
        mode: 0400
  when: 'user.changed'
  tags: noc_users

- name: Ensure .ssh directory is present for NOC member {{ username }}
  file:
    path: "{{ home }}/.ssh"
    state: directory
  tags: noc_users

- name: Ensure public key of NOC member {{ username }} is deployed
  copy:
    dest: "{{ home }}/.ssh/authorized_keys"
    src: "{{ item.path }}"
    remote_src: yes
  tags: noc_users

- name: Check wether dotfile directory for NOC member {{ username }} exists
  stat:
    path: "{{ dotfiles }}"
  register: stat_dotfiles
  changed_when: no
  tags: noc_users

- name: Copy dotfiles of NOC member {{ username }} to home directory
  synchronize:
    src: "{{ dotfiles }}"
    dest: "{{ home }}"
    checksum: yes
    rsync_opts:
      - "--chown={{ username }}"
  delegate_to: "{{ inventory_hostname }}"
  when: 'stat_dotfiles.stat.exists and stat_dotfiles.stat.isdir'
  tags: noc_users
