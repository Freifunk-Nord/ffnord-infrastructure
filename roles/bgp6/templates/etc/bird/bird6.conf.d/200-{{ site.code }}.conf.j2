# The mesh table is the main table which is piped
# into the kernel table. Every mesh specific
# table exports it routes to the mesh table and import
# routes which are not in the mesh specific prefix.
# The mesh_${site} tables exchange routes with the local
# peers from here routes to local subnets are communicated
# and routes to other communities from icvpn peers in the local
# network are exchanged.
#
# If this router is a icvpn peer then routes from the
# icvpn will be exchanged directly with the mesh table.
#
# icvpn <-> [mesh] <#> [mesh_ffgc,..] <#> local-peers
#             ^--------> [kernel(rtable=42)]

# Filter function to check if an IPv6 Route is a ULA.
function is_ula() {
  return (net ~ [ fc00::/7{48,64} ]);
};

# Filter function to check if an IPv6 Route is from
# a Freifunk range.
function is_freifunk() {
  return net ~ [ 2001:0bf7::/32+,      # Foerderverein freie Netzwerke e.V.
                 2a03:2260::/29+,      # Freifunk Rheinland e.V.
                 2001:67c:2d50::/48 ]; # FFHL, Chaotikum e.V.
}

# template for local route exchange via bgp
template bgp local_mesh {
  import where is_ula() || is_freifunk();
  export where source = RTS_BGP;
  direct;
  next hop self;
};

table 'mesh_{{ site.code }}';

protocol static 'static_{{ site.code }}' {
  table 'mesh_{{ site.code }}';
  # reject route if announced from external
  {% if site.mesh.network_dynamic_clients is defined %}
  route {{ site.mesh.network_dynamic_clients.ipv6 }} reject;
  {% else %}
  route {{ site.mesh.network.ipv6 }} reject;
  {% endif %}
  };

protocol static 'local_{{ site.code }}' {
  table 'mesh_{{ site.code }}';
  # reject route if announced from external
  {% if site.mesh.network_dynamic_clients is defined %}
  route {{ site.mesh.network_dynamic_clients.ipv6 }} via "br-{{ site.code }}";
  {% else %}
  route {{ site.mesh.network.ipv6 }} via "br-{{ site.code }}";
  {% endif %}
};

function is_self_{{ site.code }}() {
  return (proto = "static_{{ site.code }}");
};

# pipe between mesh and mesh_{{ site.code }} table
# import only iff not in own network.
protocol pipe 'pipe_mesh_{{ site.code }}' {
  table mesh;
  peer table 'mesh_{{ site.code }}';
  import where ! is_self_{{ site.code }}();
  export where (source = RTS_BGP || source = RTS_STATIC_DEVICE);
};

# template for local mesh connections
# extend local_mesh template
template bgp 'local_mesh_{{ site.code }}' from local_mesh {
  table 'mesh_{{ site.code }}';
  source address {{ interface.mesh_bridge.address.ipv6 | ipaddr('address') }};
  local as asn;
  import all;
  export all;
};

# Include auto generated peers
include "/etc/bird/bird6.peers.d/{{ site.code }}.conf";
